 1단계: 초기 검증 및 모달 표시

  1. calculateAnnuityFees() 함수 실행
  2. window.currentPatents 배열에 특허 데이터가 있는지 확인
  3. 감면유형 선택 모달 (showDiscountSelectionModal()) 표시
  4. 사용자가 감면유형 선택 후 "계산하기" 버튼 클릭

  2단계: 각 특허별 계산 로직 실행

  performNewAnnuityCalculation() 함수가 모든 특허를 순환하며 계산

  2-1. 기본 날짜 설정

  const today = new Date();  // 현재 날짜
  const registrationDate = new Date(patent.registrationDate);  // 등록일

  2-2. 3년 업프론트 규칙 적용

  const threeYearsAfterRegistration = new Date(registrationDate);
  threeYearsAfterRegistration.setFullYear(threeYearsAfterRegistration.getFullYear() + 3);
  - 한국 특허법: 등록일부터 3년간은 연차료 선납 (업프론트 납부)
  - 4년차부터 연차료 납부 시작

  2-3. 시나리오 분기

  🔹 시나리오 A: 현재날짜 < 등록일+3년 (첫 연차료 납부 전)
  if (today < threeYearsAfterRegistration) {
      // 직전년도 납부연월: '' (빈칸)
      // 해당 연차료 납부마감일: 등록일 + 3년
      // 해당연차수: '4년차'
      // 유효/불납: '유효'
      // 정상납부/미납: '정상납부'
  }

  🔹 시나리오 B: 현재날짜 ≥ 등록일+3년 (연차료 납부 대상)

  3단계: 연차수 계산

  // 현재 연차수 = 4년차부터 시작
  const annualYear = Math.floor((today.getTime() - threeYearsAfterRegistration.getTime()) / (365.25 * 24 * 60 * 60 *
   1000)) + 4;

  // 다음 연차수 (1년 앞서서 납부하는 개념)
  const nextYear = annualYear + 1;

  4단계: 각 컬럼별 값 계산

  📅 직전년도 납부연월

  const previousYearDate = new Date(adjustedDueDate);
  previousYearDate.setFullYear(previousYearDate.getFullYear() - 1);
  // 형태: "2024-03" (년-월 형식)

  📅 해당 연차료 납부마감일

  const adjustedDueDate = new Date(registrationDate);
  adjustedDueDate.setFullYear(registrationDate.getFullYear() + 3);
  // 형태: "2024-03-15" (등록일 + 3년)

  🔢 해당연차수

  const annualYear = nextYear + '년차';  // 예: "5년차"

  💰 해당연차료 계산 - calculateNewAnnuityFee() 함수

  Step 1: 기본료 확인
  const NEW_BASE_FEES = {
      1: 13000,   2: 13000,   3: 13000,      // 1~3년차: 13,000원
      4: 36000,   5: 36000,   6: 36000,      // 4~6년차: 36,000원
      7: 90000,   8: 90000,   9: 90000,      // 7~9년차: 90,000원
      10: 216000, 11: 216000, 12: 216000,    // 10~12년차: 216,000원
      13: 324000, // ... 25년차까지 324,000원
  };
  const baseFee = NEW_BASE_FEES[annualYear];

  Step 2: 청구항 가산료 계산
  const NEW_CLAIM_FEES = {
      1: 12000,   2: 12000,   3: 12000,      // 1~3년차: 12,000원
      4: 20000,   5: 20000,   6: 20000,      // 4~6년차: 20,000원
      7: 34000,   8: 34000,   9: 34000,      // 7~9년차: 34,000원
      10: 49000,  11: 49000,  12: 49000,     // 10~12년차: 49,000원
      13: 49000, // ... 25년차까지 49,000원
  };
  const claimSurchargeFee = NEW_CLAIM_FEES[annualYear] * claimCount;

  Step 3: 정상 연차료 계산
  const normalFee = baseFee + claimSurchargeFee;

  Step 4: 감면율 적용
  const NEW_DISCOUNT_TYPES = {
      'type1': { rate: 0.5, applicableFromYear: 4 },           // 50% 감면
      'type1_1': { rate: 0.7, rate10Plus: 0.5, applicableFromYear: 4 }, // 4~9년차 70%, 10년차+ 50%
      'type2': { rate: 0.3, applicableFromYear: 4, applicableToYear: 9 }, // 4~9년차 30%
      'type2_1': { rate: 0.5, applicableFromYear: 4, applicableToYear: 9 }, // 4~9년차 50%
      'none': { rate: 0 }                                     // 감면 없음
  };

  const discountedFee = Math.round(normalFee * (1 - discountRate));

  ⚖️ 유효/불납 상태 계산 - computeStatus() 함수

  function computeStatus(dueDate, today, policy) {
      const graceEnd = endOfMonthSafeAddMonths(dueDate, 6);      // 추납기간 6개월
      const recoveryEnd = endOfMonthSafeAddMonths(graceEnd, 3);  // 회복기간 3개월

      if (today <= dueDate) return "유효";
      if (dueDate < today && today <= graceEnd) return "추납기간";
      if (graceEnd < today && today <= recoveryEnd) return "회복기간";
      return "불납";
  }

  💳 정상납부/미납 상태

  let paymentStatus = "정상납부";
  if (currentStatus === "불납") {
      paymentStatus = "미납";
  } else if (currentStatus !== "유효") {
      paymentStatus = currentStatus; // "추납기간", "회복기간"
  }

  ⏰ 추납기간 계산

  const graceEnd = endOfMonthSafeAddMonths(dueDate, 6); // 납부마감일 + 6개월

  if (status === "유효") {
      latePaymentPeriod = dueDate + ' ~ ' + graceEnd;  // "2024-03-15 ~ 2024-09-15"
  } else if (status === "추납기간") {
      latePaymentPeriod = '진행중 (' + graceEnd + ' 마감)';
  }

  🔄 회복기간 계산

  const recoveryEnd = endOfMonthSafeAddMonths(graceEnd, 3); // 추납기간 종료 + 3개월

  if (status === "유효" || status === "추납기간") {
      recoveryPeriod = graceEnd + ' ~ ' + recoveryEnd;  // "2024-09-15 ~ 2024-12-15"
  } else if (status === "회복기간") {
      recoveryPeriod = '진행중 (' + recoveryEnd + ' 마감)';
  }

  5단계: 데이터 저장 및 UI 업데이트

  // 계산된 데이터를 특허 객체에 저장
  patent.calculatedData = {
      previousPaymentMonth: "2023-03",        // 직전년도 납부연월
      dueDate: "2024-03-15",                  // 해당 연차료 납부마감일
      annualYear: "5년차",                     // 해당연차수
      annualFee: "72,000원",                   // 해당연차료
      validityStatus: "유효",                   // 유효/불납
      paymentStatus: "정상납부",                // 정상납부/미납
      latePaymentPeriod: "2024-03-15 ~ 2024-09-15", // 추납기간
      recoveryPeriod: "2024-09-15 ~ 2024-12-15"     // 회복기간
  };

  // 현재 페이지 테이블 UI 업데이트 (해당 특허가 현재 페이지에 표시되는 경우)
  if (cells) {
      cells[9].textContent = patent.calculatedData.previousPaymentMonth;
      cells[10].textContent = patent.calculatedData.dueDate;
      cells[11].textContent = patent.calculatedData.annualYear;
      // ... 나머지 컬럼들
  }

  6단계: 완료 메시지 표시

  - 선택한 감면유형 정보와 함께 계산 완료 메시지 표시
  - 5초 후 자동 제거

  이렇게 복잡한 한국 특허법의 3년 업프론트 납부 규정과 다양한 감면 정책을 모두 고려하여 정확한 연차료와 관련 일정을
  실시간으로 계산하는 시스템입니다! 🎯